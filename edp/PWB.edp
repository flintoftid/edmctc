//
// Power balance (PWB) model calculation.
//
// (c) 2016-2017, Ian D. Flintoft <ian.flintoft@googlemail.com>
//
// This file is part of the Electromagnetic Diffusion Model (EDM) 
// Canonical Example Suite [Flintoft2017,flintoft2017b].
//
// The EDM Canonical Example Suite is free software: you can 
// redistribute it and/or modify it under the terms of the GNU 
// General Public License as published by the Free Software 
// Foundation, either version 3 of the License, or (at your option) 
// any later version.
//
// The EDM Canonical Example Suite is distributed in the hope that 
// it will be useful, but WITHOUT ANY WARRANTY; without even the 
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
// PURPOSE.  See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with  The EDM Canonical Example Suite.  If not, 
// see <http://www.gnu.org/licenses/>.
//
// References:
//
// [Flintoft2017] I D Flintoft, A C Marvin, F I Funn, L Dawson, X Zhang,
// M P Robinson, and J F Dawson, "Evaluation of the diffusion equation for
// modelling reverberant electromagnetic fields", IEEE Transactions on Electromagnetic
// Compatibility, vol. 59, no. 3, pp. 760–769, 2017. DOI: 10.1109/TEMC.2016.2623356.
//
// [Flintoft2017b] I D Flintoft and J F Dawson, “3D electromagnetic diffusion models 
// for reverberant environments”, 2017 International Conference on Electromagnetics 
// in Advanced Applications (ICEAA2017), Verona, Italy, pp. 11-15 Sep. 2017.
//

// Need to be global to initialise DDM solutions.
real w1pwb; 
real w2pwb;

if( isPart ) {
  real ACS1 = wallACS1 + partACS1;
  real ACS2;
  if( isCyl )
    ACS2 = wallACS2 + partACS2 + cylACS;
  else
    ACS2 = wallACS2 + partACS2;
  real det = ( ACS1 + holeTCS ) * ( ACS2 + holeTCS ) - holeTCS * holeTCS;
  real S1pwb = ( ACS2 + holeTCS ) * srcTRP / det;
  real S2pwb = holeTCS * srcTRP / det;
  w1pwb = S1pwb / c0;
  w2pwb = S2pwb / c0;
  cout << "PWB power density in cavity 1: " << S1pwb << " W/m^2 = " << 10 * log10( S1pwb ) << " dB W/m^2" << endl;
  cout << "PWB power density in cavity 2: " << S2pwb << " W/m^2 = " << 10 * log10( S2pwb ) << " dB W/m^2"<< endl;  
}
else {
  real ACS;
  if( isCyl )
    ACS = wallACS0 + cylACS;
  else
    ACS = wallACS0;  
  real Spwb = srcTRP / ACS;
  real wpwb = Spwb / c0;
  cout << "PWB power density in cavity: " << Spwb << " W/m^2 = " << 10 * log10( Spwb ) << " dB W/m^2" << endl;
}

