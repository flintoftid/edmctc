//
// 3D data export of energy density and energy density flux.
//
// (c) 2016-2017, Ian D. Flintoft <ian.flintoft@googlemail.com>
//
// This file is part of the Electromagnetic Diffusion Model (EDM) 
// Canonical Example Suite [Flintoft2017,flintoft2017b].
//
// The EDM Canonical Example Suite is free software: you can 
// redistribute it and/or modify it under the terms of the GNU 
// General Public License as published by the Free Software 
// Foundation, either version 3 of the License, or (at your option) 
// any later version.
//
// The EDM Canonical Example Suite is distributed in the hope that 
// it will be useful, but WITHOUT ANY WARRANTY; without even the 
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
// PURPOSE.  See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with  The EDM Canonical Example Suite.  If not, 
// see <http://www.gnu.org/licenses/>.
//
// References:
//
// [Flintoft2017] I D Flintoft, A C Marvin, F I Funn, L Dawson, X Zhang,
// M P Robinson, and J F Dawson, "Evaluation of the diffusion equation for
// modelling reverberant electromagnetic fields", IEEE Transactions on Electromagnetic
// Compatibility, vol. 59, no. 3, pp. 760–769, 2017. DOI: 10.1109/TEMC.2016.2623356.
//
// [Flintoft2017b] I D Flintoft and J F Dawson, “3D electromagnetic diffusion models 
// for reverberant environments”, 2017 International Conference on Electromagnetics 
// in Advanced Applications (ICEAA2017), Verona, Italy, pp. 11-15 Sep. 2017.
//

int Nx = 100;
int Ny = 50;

real xo;
real yo;
bool mask;

// Export energy density.
ofstream ofw( "w.dat" );
ofstream ofwr( "wr.dat" );
ofw << Nx + 1 << " " << Ny + 1 << " " << endl;
ofwr << Nx + 1 << " " << Ny + 1 << " " << endl;
for( int i = 0 ; i <= Nx ; i++ ) {
  for( int j = 0 ; j <= Ny ; j++ ) {
      xo = Lx * real(i) / Nx;
      yo = Ly * real(j) / Ny;
      mask = ( 
               ( isCyl  && ( ( xo - cylX ) * ( xo - cylX ) + ( yo - cylY ) * ( yo - cylY ) < cylRadius * cylRadius ) ) ||
               ( isPart && ( xo > partX - 0.5 * partThickness && xo < partX + 0.5 * partThickness && yo < Ly - holeWidth ) ) ||
               ( isSrc && ( ( xo - srcX ) * ( xo - srcX ) + ( yo - srcY ) * ( yo - srcY ) < srcRadius * srcRadius ) )
             );
      if( mask ) {
        ofw << xo << " " << yo  << " " << "NaN"        << " " << endl;
        ofwr << xo << " " << yo  << " " << "NaN"        << " " << endl; 
      }
      else {
        ofw << xo << " " << yo  << " " << w( xo , yo ) << " " << endl;
        ofwr << xo << " " << yo  << " " << wr( xo , yo ) << " " << endl;
      }
  }
}

// Export energy density flux.
ofstream ofJ( "J.dat" );
ofstream ofJr( "Jr.dat" );
ofJ << Nx + 1 << " " << Ny + 1 << " " << endl;
ofJr << Nx + 1 << " " << Ny + 1 << " " << endl;
for( int i = 0 ; i <= Nx ; i++ ) {
  for( int j = 0 ; j <= Ny ; j++ ) {
      xo = Lx * real(i) / Nx;
      yo = Ly * real(j) / Ny;     
      mask = ( 
               ( isCyl  && ( ( xo - cylX ) * ( xo - cylX ) + ( yo - cylY ) * ( yo - cylY ) < cylRadius * cylRadius ) ) ||
               ( isPart && ( xo > partX - 0.5 * partThickness && xo < partX + 0.5 * partThickness && yo < Ly - holeWidth ) ) ||
               ( isSrc && ( ( xo - srcX ) * ( xo - srcX ) + ( yo - srcY ) * ( yo - srcY ) < srcRadius * srcRadius ) )
             );    
      if( mask ) {
        ofJ << xo << " " << yo << " " << "NaN" << " " << "NaN"  << endl;
        ofJr << xo << " " << yo << " " << "NaN" << " " << "NaN"  << endl;
      }
      else {
        ofJ << xo << " " << yo << " " << Jx( xo , yo ) << " " << Jy( xo , yo ) << endl;
        ofJr << xo << " " << yo << " " << Jrx( xo , yo ) << " " << Jry( xo , yo ) << endl;
      }
  }
}
