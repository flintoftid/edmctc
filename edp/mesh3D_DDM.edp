//
// Import 3D dual domain meshes.
//
// (c) 2016-2017, Ian D. Flintoft <ian.flintoft@googlemail.com>
//
// This file is part of the Electromagnetic Diffusion Model (EDM) 
// Canonical Example Suite [Flintoft2017,flintoft2017b].
//
// The EDM Canonical Example Suite is free software: you can 
// redistribute it and/or modify it under the terms of the GNU 
// General Public License as published by the Free Software 
// Foundation, either version 3 of the License, or (at your option) 
// any later version.
//
// The EDM Canonical Example Suite is distributed in the hope that 
// it will be useful, but WITHOUT ANY WARRANTY; without even the 
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
// PURPOSE.  See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with  The EDM Canonical Example Suite.  If not, 
// see <http://www.gnu.org/licenses/>.
//
// References:
//
// [Flintoft2017] I D Flintoft, A C Marvin, F I Funn, L Dawson, X Zhang,
// M P Robinson, and J F Dawson, "Evaluation of the diffusion equation for
// modelling reverberant electromagnetic fields", IEEE Transactions on Electromagnetic
// Compatibility, vol. 59, no. 3, pp. 760–769, 2017. DOI: 10.1109/TEMC.2016.2623356.
//
// [Flintoft2017b] I D Flintoft and J F Dawson, “3D electromagnetic diffusion models 
// for reverberant environments”, 2017 International Conference on Electromagnetics 
// in Advanced Applications (ICEAA2017), Verona, Italy, pp. 11-15 Sep. 2017.
//

// Surface labels.
int Gwall1;
int Gpart1;
int Gwall2;
int Gpart2;
int Ghole1;
int Ghole2;
int Gcyl;
int Gsrc;

// Load mesh in medit format.
mesh3 Th1, Th2;
if( !isCyl && !isSrc ) {
  Th1 = readmesh3( "../Meshes/cavity1.mesh" );
  Ghole1 = 1;
  Gwall1 = 2;
  Gpart1 = 3;
  Th2 = readmesh3( "../Meshes/cavity2.mesh" );
  Ghole2 = 1;
  Gpart2 = 2;
  Gwall2 = 3; 
}  
else if( isCyl && !isSrc ) {
  Th1 = readmesh3( "../Meshes/cavity1.mesh" );
  Ghole1 = 1;
  Gwall1 = 2;
  Gpart1 = 3;
  Th2 = readmesh3( "../Meshes/cavity2_cylinder.mesh" );
  Ghole2 = 1;
  Gpart2 = 2;
  Gwall2 = 3;
  Gcyl = 4;
}
else if( !isCyl && isSrc ) {
  Th1 = readmesh3( "../Meshes/cavity1_source.mesh" );
  Ghole1 = 1;
  Gwall1 = 2;
  Gpart1 = 3;
  Gsrc = 4;
  Th2 = readmesh3( "../Meshes/cavity2.mesh" );
  Ghole2 = 1;
  Gpart2 = 2;
  Gwall2 = 3;     
}  
else if( isCyl && isSrc ) {
  Th1 = readmesh3( "../Meshes/cavity1_source.mesh" );
  Ghole1 = 1;
  Gwall1 = 2;
  Gpart1 = 3;
  Gsrc = 4;
  Th2 = readmesh3( "../Meshes/cavity2_cylinder.mesh" );
  Ghole2 = 1;
  Gpart2 = 2;
  Gwall2 = 3;
  Gcyl = 4;
}

// Show the mesh.
plot ( Th1 , Th2 , wait = 0 , ps = "mesh.eps" );

