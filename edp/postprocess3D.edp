//
// 3D single domain post-processing.
//
// (c) 2016-2017, Ian D. Flintoft <ian.flintoft@googlemail.com>
//
// This file is part of the Electromagnetic Diffusion Model (EDM) 
// Canonical Example Suite [Flintoft2017,flintoft2017b].
//
// The EDM Canonical Example Suite is free software: you can 
// redistribute it and/or modify it under the terms of the GNU 
// General Public License as published by the Free Software 
// Foundation, either version 3 of the License, or (at your option) 
// any later version.
//
// The EDM Canonical Example Suite is distributed in the hope that 
// it will be useful, but WITHOUT ANY WARRANTY; without even the 
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
// PURPOSE.  See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with  The EDM Canonical Example Suite.  If not, 
// see <http://www.gnu.org/licenses/>.
//
// References:
//
// [Flintoft2017] I D Flintoft, A C Marvin, F I Funn, L Dawson, X Zhang,
// M P Robinson, and J F Dawson, "Evaluation of the diffusion equation for
// modelling reverberant electromagnetic fields", IEEE Transactions on Electromagnetic
// Compatibility, vol. 59, no. 3, pp. 760–769, 2017. DOI: 10.1109/TEMC.2016.2623356.
//
// [Flintoft2017b] I D Flintoft and J F Dawson, “3D electromagnetic diffusion models 
// for reverberant environments”, 2017 International Conference on Electromagnetics 
// in Advanced Applications (ICEAA2017), Verona, Italy, pp. 11-15 Sep. 2017.
//

// Energy density flux.
Vh Jx, Jy, Jz;
Jx = -D * dx( w );
Jy = -D * dy( w );
Jz = -D * dz( w );

// Power density.
Vh S = c0 * w;

// Spurious direct energy density from source. Assumed approximately the same for a surface source.
Vh wds;
if( isPart )
  wds = Pt[0] / ( 4.0 * pi * D * sqrt( ( x - xsource[0] )^2 + ( y - ysource[0] )^2 + ( z - zsource[0] )^2 ) ) * ( x <= partX ) + 0.0 * ( x > partX );
else
  wds = Pt[0] / ( 4.0 * pi * D * sqrt( ( x - xsource[0] )^2 + ( y - ysource[0] )^2 + ( z - zsource[0] )^2 ) );

// Reverberant energy density.
Vh wr = w - wds;

// Reverberant power density.
Vh Sr = c0 * wr;

// Reverberant power density in decibels.
Vh SrdB = 10.0 * log10( Sr );

// Reverberant energy density flux;
Vh Jrx, Jry, Jrz;
Jrx = -D * dx( wr );
Jry = -D * dy( wr );
Jrz = -D * dz( wr );

// Report.
if( isPart ) {
  cout << "EDM power density at centre of cavity 1: " << S(obsX1,obsY1,obsZ1) << " W/m^2 = " << 10 * log10( S(obsX1,obsY1,obsZ1) ) << " dB W/m^2" << endl;
  cout << "EDM power density at centre of cavity 2: " << S(obsX2,obsY2,obsZ2) << " W/m^2 = " << 10 * log10( S(obsX2,obsY2,obsZ2) ) << " dB W/m^2" << endl;  
  cout << "EDM reverberant power density at centre of cavity 1: " << Sr(obsX1,obsY1,obsZ1) << " W/m^2 = " << 10 * log10( Sr(obsX1,obsY1,obsZ1) ) << " dB W/m^2" << endl;
  cout << "EDM reverberant power density at centre of cavity 2: " << Sr(obsX2,obsY2,obsZ2) << " W/m^2 = " << 10 * log10( Sr(obsX2,obsY2,obsZ2) ) << " dB W/m^2" << endl;    
}
else {
  cout << "EDM power density at centre of cavity: " << S(obsX0,obsY0,obsZ0) << " W/m^2 = " << 10 * log10( S(obsX0,obsY0,obsZ0) ) << " dB W/m^2" << endl;
  cout << "EDM reverberant power density at centre of cavity: " << Sr(obsX0,obsY0,obsZ0) << " W/m^2 = " << 10 * log10( Sr(obsX0,obsY0,obsZ0) ) << " dB W/m^2" << endl;
}

//
// Plots.
//


// MATLAB "parula" colormap.
real[int] colors = [
    0.6859 ,   0.6858 ,   0.5292 ,
    0.5814 ,   0.9322 ,   0.8589 ,
    0.5208 ,   0.9628 ,   0.7574 ,
    0.3391 ,   0.3613 ,   0.7489 ,
    0.1133 ,   0.6766 ,   0.9264 ,
    0.1679 ,   0.9453 ,   0.9831 ,    
    0.1679 ,   0.9453 ,   0.9831 ,   // Kludge - repeat entries to shift range relative to data.
    0.1679 ,   0.9453 ,   0.9831 ,     
    0.1679 ,   0.9453 ,   0.9831 ,                 
    0.1679 ,   0.9453 ,   0.9831 
];

// MATLAB "parula" colormap.
real[int] colors2 = [
   0.6859 ,   0.6858 ,   0.5292 ,
   0.5814 ,   0.9322 ,   0.8589 ,
   0.5208 ,   0.9628 ,   0.7574 ,
   0.3391 ,   0.3613 ,   0.7489 ,
   0.1133 ,   0.6766 ,   0.9264 ,
   0.1679 ,   0.9453 ,   0.9831 
];

//real[int] levels = [  14.0 , 14.25 , 14.5 , 15.0 , 16.0 , 17.0 , 18.0 , 19.0 , 19.0 , 19.5 , 19.75 , 20.0 , 21.0 ];
//plot( SrdB , value = true , viso = levels , wait = 1 , hsv = colors, cmm = "Power density (dB W/m^2)" );
plot( SrdB , value = true , nbiso = 12 , wait = 1 , hsv = colors2 , cmm = "Power density (dB W/m^2)" );

